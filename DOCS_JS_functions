# Default/Optional Parameters in Function Definitions
function hello(name = 'Chris') {
  console.log(`Hello ${name}!`);
}

hello('Ari'); // Hello Ari!
hello();      // Hello Chris!

# Using the map function 
const originals = [1, 2, 3];

const doubled = originals.map((item) => item * 2);

console.log(doubled); // [2, 4, 6]

# Dealing With Anonymous Functions
Functions that don't have a name are known as anonymous functions
e.g
(
	function () 
	{
		alert('hello');
	}
)
# This form of creating a function is also known as function expression.

#1 Deprecated usage of passing a function as a parameter of another function

function logKey(event)
{
	console.log(`You pressed "${event.key}".`); #uses backtiques
}
textBox = document.getElementById("inputbox");
# attaching an event listener to the input field
textBox.addEventListener('keydown', logKey);

#2 Instead of defining a separate logKey() function, you can pass an anonymous function into addEventListener(): This is more like defining the logkey function within the second parameter of addEventListener().

textBox.addEventListener('keydown', function(event) {
  console.log(`You pressed "${event.key}".`);
});
#2.1.0 Using Arrow Function; instead of function(event), you write (event) =>:
textBox.addEventListener('keydown', (event) => {
  console.log(`You pressed "${event.key}".`);
});
#2.1.1 -> in Arrow Func. When the function only has only one line in the curly brackets, you omit the curly brackets
textBox.addEventListener('keydown', (event) => console.log(`You pressed "${event.key}".`));
#2.1.2 -> If the function takes only one parameter you can also omit the parenthesis around the parameter
textBox.addEventListener('keydown', event => console.log(`You pressed "${event.key}".`));
#2.1.3 -> Finally, if your function needs to return a value, and contains only one line, you can also omit the return statement. In the following example we're using the map() method of Array to double every value in the original array:

const originals = [1, 2, 3];

const doubled = originals.map((item) => item * 2);

console.log(doubled); // [2, 4, 6]
Copy to ClipboardCopy to ClipboardCopy to Clipboard
The map() method takes each item in the array in turn, passing it into the given function. It then takes the value returned by that function and adds it to a new array.

So in the example above, (item) => item * 2 is the arrow function equivalent of:

function doubleItem(item) {
  return item * 2;
}

# Example
#!/usr/bin/node
/*
 * Make use of an anonymous function
 * that makes use of an arrow function
 */
const valToInt = parseInt(process.argv[2]);
(valToInt)
  ? (() => {
      for (let i = 0; i < valToInt; i++) {
        console.log('C is fun');
      }
    })()
  : console.log('Missing number of occurrences');


